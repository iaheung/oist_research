// -------------------------------------------------------------
//
// Module: matlab_IIR
// Generated by MATLAB(R) 9.14 and Filter Design HDL Coder 3.1.13.
// Generated on: 2023-08-18 15:49:51
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// OptimizeForHDL: on
// InputPort: iir_filter_in
// OutputPort: iir_filter_out
// Name: matlab_IIR
// TargetLanguage: Verilog
// TestBenchName: iir_filter_tb
// TestBenchStimulus: impulse step ramp chirp noise 

// Filter Specifications:
//
// Sample Rate   : N/A (normalized frequency)
// Response      : Lowpass
// Specification : N,F3dB
// Filter Order  : 10
// 3-dB Point    : 0.3
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II, Second-Order Sections
// Number of Sections  : 5
// Stable              : Yes
// Linear Phase        : No
// Arithmetic          : fixed
// Numerator           : s14,11 -> [-4 4)
// Denominator         : s14,12 -> [-2 2)
// Scale Values        : s14,15 -> [-2.500000e-01 2.500000e-01)
// Input               : s14,13 -> [-1 1)
// Section Input       : s14,9 -> [-16 16)
// Section Output      : s14,8 -> [-32 32)
// Output              : s14,8 -> [-32 32)
// State               : s16,15 -> [-1 1)
// Numerator Prod      : s30,26 -> [-8 8)
// Denominator Prod    : s30,27 -> [-4 4)
// Numerator Accum     : s40,26 -> [-8192 8192)
// Denominator Accum   : s40,27 -> [-4096 4096)
// Round Mode          : floor
// Overflow Mode       : wrap
// Cast Before Sum     : true
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module matlab_IIR
               (
                clk,
                clk_enable,
                reset,
                iir_filter_in,
                iir_filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [13:0] iir_filter_in; //sfix14_En13
  output  signed [13:0] iir_filter_out; //sfix14_En8

////////////////////////////////////////////////////////////////
//Module Architecture: matlab_IIR
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [13:0] scaleconst1 = 14'b01011101101011; //sfix14_En15
  parameter signed [13:0] coeff_b1_section1 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_b2_section1 = 14'b01000000000000; //sfix14_En11
  parameter signed [13:0] coeff_b3_section1 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_a2_section1 = 14'b10111101001110; //sfix14_En12
  parameter signed [13:0] coeff_a3_section1 = 14'b00110001101000; //sfix14_En12
  parameter signed [13:0] scaleconst2 = 14'b01001101001100; //sfix14_En15
  parameter signed [13:0] coeff_b1_section2 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_b2_section2 = 14'b01000000000000; //sfix14_En11
  parameter signed [13:0] coeff_b3_section2 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_a2_section2 = 14'b11001000111110; //sfix14_En12
  parameter signed [13:0] coeff_a3_section2 = 14'b00011101100111; //sfix14_En12
  parameter signed [13:0] scaleconst3 = 14'b01000011001000; //sfix14_En15
  parameter signed [13:0] coeff_b1_section3 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_b2_section3 = 14'b01000000000000; //sfix14_En11
  parameter signed [13:0] coeff_b3_section3 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_a2_section3 = 14'b11010000001001; //sfix14_En12
  parameter signed [13:0] coeff_a3_section3 = 14'b00010001011011; //sfix14_En12
  parameter signed [13:0] scaleconst4 = 14'b00111101010101; //sfix14_En15
  parameter signed [13:0] coeff_b1_section4 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_b2_section4 = 14'b01000000000000; //sfix14_En11
  parameter signed [13:0] coeff_b3_section4 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_a2_section4 = 14'b11010100010010; //sfix14_En12
  parameter signed [13:0] coeff_a3_section4 = 14'b00001010011000; //sfix14_En12
  parameter signed [13:0] scaleconst5 = 14'b00111010101010; //sfix14_En15
  parameter signed [13:0] coeff_b1_section5 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_b2_section5 = 14'b01000000000000; //sfix14_En11
  parameter signed [13:0] coeff_b3_section5 = 14'b00100000000000; //sfix14_En11
  parameter signed [13:0] coeff_a2_section5 = 14'b11010110001100; //sfix14_En12
  parameter signed [13:0] coeff_a3_section5 = 14'b00000111001001; //sfix14_En12
  // Signals
  reg  signed [13:0] input_register; // sfix14_En13
  wire signed [32:0] scale1; // sfix33_En28
  wire signed [27:0] mul_temp; // sfix28_En28
  wire signed [13:0] scaletypeconvert1; // sfix14_En9
  // Section 1 Signals 
  wire signed [39:0] a1sum1; // sfix40_En27
  wire signed [39:0] a2sum1; // sfix40_En27
  wire signed [39:0] b1sum1; // sfix40_En26
  wire signed [39:0] b2sum1; // sfix40_En26
  wire signed [15:0] typeconvert1; // sfix16_En15
  reg  signed [15:0] delay_section1 [0:1] ; // sfix16_En15
  wire signed [39:0] inputconv1; // sfix40_En27
  wire signed [29:0] a2mul1; // sfix30_En27
  wire signed [29:0] a3mul1; // sfix30_En27
  wire signed [29:0] b2mul1; // sfix30_En26
  wire signed [39:0] sub_cast; // sfix40_En27
  wire signed [39:0] sub_cast_1; // sfix40_En27
  wire signed [40:0] sub_temp; // sfix41_En27
  wire signed [39:0] sub_cast_2; // sfix40_En27
  wire signed [39:0] sub_cast_3; // sfix40_En27
  wire signed [40:0] sub_temp_1; // sfix41_En27
  wire signed [39:0] b1multypeconvert1; // sfix40_En26
  wire signed [39:0] add_cast; // sfix40_En26
  wire signed [39:0] add_cast_1; // sfix40_En26
  wire signed [40:0] add_temp; // sfix41_En26
  wire signed [39:0] add_cast_2; // sfix40_En26
  wire signed [39:0] add_cast_3; // sfix40_En26
  wire signed [40:0] add_temp_1; // sfix41_En26
  wire signed [13:0] section_result1; // sfix14_En8
  wire signed [32:0] scale2; // sfix33_En28
  wire signed [27:0] mul_temp_1; // sfix28_En23
  wire signed [13:0] scaletypeconvert2; // sfix14_En9
  // Section 2 Signals 
  wire signed [39:0] a1sum2; // sfix40_En27
  wire signed [39:0] a2sum2; // sfix40_En27
  wire signed [39:0] b1sum2; // sfix40_En26
  wire signed [39:0] b2sum2; // sfix40_En26
  wire signed [15:0] typeconvert2; // sfix16_En15
  reg  signed [15:0] delay_section2 [0:1] ; // sfix16_En15
  wire signed [39:0] inputconv2; // sfix40_En27
  wire signed [29:0] a2mul2; // sfix30_En27
  wire signed [29:0] a3mul2; // sfix30_En27
  wire signed [29:0] b2mul2; // sfix30_En26
  wire signed [39:0] sub_cast_4; // sfix40_En27
  wire signed [39:0] sub_cast_5; // sfix40_En27
  wire signed [40:0] sub_temp_2; // sfix41_En27
  wire signed [39:0] sub_cast_6; // sfix40_En27
  wire signed [39:0] sub_cast_7; // sfix40_En27
  wire signed [40:0] sub_temp_3; // sfix41_En27
  wire signed [39:0] b1multypeconvert2; // sfix40_En26
  wire signed [39:0] add_cast_4; // sfix40_En26
  wire signed [39:0] add_cast_5; // sfix40_En26
  wire signed [40:0] add_temp_2; // sfix41_En26
  wire signed [39:0] add_cast_6; // sfix40_En26
  wire signed [39:0] add_cast_7; // sfix40_En26
  wire signed [40:0] add_temp_3; // sfix41_En26
  wire signed [13:0] section_result2; // sfix14_En8
  wire signed [32:0] scale3; // sfix33_En28
  wire signed [27:0] mul_temp_2; // sfix28_En23
  wire signed [13:0] scaletypeconvert3; // sfix14_En9
  // Section 3 Signals 
  wire signed [39:0] a1sum3; // sfix40_En27
  wire signed [39:0] a2sum3; // sfix40_En27
  wire signed [39:0] b1sum3; // sfix40_En26
  wire signed [39:0] b2sum3; // sfix40_En26
  wire signed [15:0] typeconvert3; // sfix16_En15
  reg  signed [15:0] delay_section3 [0:1] ; // sfix16_En15
  wire signed [39:0] inputconv3; // sfix40_En27
  wire signed [29:0] a2mul3; // sfix30_En27
  wire signed [29:0] a3mul3; // sfix30_En27
  wire signed [29:0] b2mul3; // sfix30_En26
  wire signed [39:0] sub_cast_8; // sfix40_En27
  wire signed [39:0] sub_cast_9; // sfix40_En27
  wire signed [40:0] sub_temp_4; // sfix41_En27
  wire signed [39:0] sub_cast_10; // sfix40_En27
  wire signed [39:0] sub_cast_11; // sfix40_En27
  wire signed [40:0] sub_temp_5; // sfix41_En27
  wire signed [39:0] b1multypeconvert3; // sfix40_En26
  wire signed [39:0] add_cast_8; // sfix40_En26
  wire signed [39:0] add_cast_9; // sfix40_En26
  wire signed [40:0] add_temp_4; // sfix41_En26
  wire signed [39:0] add_cast_10; // sfix40_En26
  wire signed [39:0] add_cast_11; // sfix40_En26
  wire signed [40:0] add_temp_5; // sfix41_En26
  wire signed [13:0] section_result3; // sfix14_En8
  wire signed [32:0] scale4; // sfix33_En28
  wire signed [27:0] mul_temp_3; // sfix28_En23
  wire signed [13:0] scaletypeconvert4; // sfix14_En9
  // Section 4 Signals 
  wire signed [39:0] a1sum4; // sfix40_En27
  wire signed [39:0] a2sum4; // sfix40_En27
  wire signed [39:0] b1sum4; // sfix40_En26
  wire signed [39:0] b2sum4; // sfix40_En26
  wire signed [15:0] typeconvert4; // sfix16_En15
  reg  signed [15:0] delay_section4 [0:1] ; // sfix16_En15
  wire signed [39:0] inputconv4; // sfix40_En27
  wire signed [29:0] a2mul4; // sfix30_En27
  wire signed [29:0] a3mul4; // sfix30_En27
  wire signed [29:0] b2mul4; // sfix30_En26
  wire signed [39:0] sub_cast_12; // sfix40_En27
  wire signed [39:0] sub_cast_13; // sfix40_En27
  wire signed [40:0] sub_temp_6; // sfix41_En27
  wire signed [39:0] sub_cast_14; // sfix40_En27
  wire signed [39:0] sub_cast_15; // sfix40_En27
  wire signed [40:0] sub_temp_7; // sfix41_En27
  wire signed [39:0] b1multypeconvert4; // sfix40_En26
  wire signed [39:0] add_cast_12; // sfix40_En26
  wire signed [39:0] add_cast_13; // sfix40_En26
  wire signed [40:0] add_temp_6; // sfix41_En26
  wire signed [39:0] add_cast_14; // sfix40_En26
  wire signed [39:0] add_cast_15; // sfix40_En26
  wire signed [40:0] add_temp_7; // sfix41_En26
  wire signed [13:0] section_result4; // sfix14_En8
  wire signed [32:0] scale5; // sfix33_En28
  wire signed [27:0] mul_temp_4; // sfix28_En23
  wire signed [13:0] scaletypeconvert5; // sfix14_En9
  // Section 5 Signals 
  wire signed [39:0] a1sum5; // sfix40_En27
  wire signed [39:0] a2sum5; // sfix40_En27
  wire signed [39:0] b1sum5; // sfix40_En26
  wire signed [39:0] b2sum5; // sfix40_En26
  wire signed [15:0] typeconvert5; // sfix16_En15
  reg  signed [15:0] delay_section5 [0:1] ; // sfix16_En15
  wire signed [39:0] inputconv5; // sfix40_En27
  wire signed [29:0] a2mul5; // sfix30_En27
  wire signed [29:0] a3mul5; // sfix30_En27
  wire signed [29:0] b2mul5; // sfix30_En26
  wire signed [39:0] sub_cast_16; // sfix40_En27
  wire signed [39:0] sub_cast_17; // sfix40_En27
  wire signed [40:0] sub_temp_8; // sfix41_En27
  wire signed [39:0] sub_cast_18; // sfix40_En27
  wire signed [39:0] sub_cast_19; // sfix40_En27
  wire signed [40:0] sub_temp_9; // sfix41_En27
  wire signed [39:0] b1multypeconvert5; // sfix40_En26
  wire signed [39:0] add_cast_16; // sfix40_En26
  wire signed [39:0] add_cast_17; // sfix40_En26
  wire signed [40:0] add_temp_8; // sfix41_En26
  wire signed [39:0] add_cast_18; // sfix40_En26
  wire signed [39:0] add_cast_19; // sfix40_En26
  wire signed [40:0] add_temp_9; // sfix41_En26
  wire signed [13:0] output_typeconvert; // sfix14_En8
  reg  signed [13:0] output_register; // sfix14_En8

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= iir_filter_in;
        end
      end
    end // input_reg_process

  assign mul_temp = input_register * scaleconst1;
  assign scale1 = $signed({{5{mul_temp[27]}}, mul_temp});

  assign scaletypeconvert1 = scale1[32:19];

  //   ------------------ Section 1 ------------------

  assign typeconvert1 = a1sum1[27:12];

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 16'b0000000000000000;
        delay_section1[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= typeconvert1;
        end
      end
    end // delay_process_section1

  assign inputconv1 = $signed({scaletypeconvert1[13:0], 18'b000000000000000000});

  assign a2mul1 = delay_section1[0] * coeff_a2_section1;

  assign a3mul1 = delay_section1[1] * coeff_a3_section1;

  assign b2mul1 = $signed({delay_section1[0][15:0], 12'b000000000000});

  assign sub_cast = inputconv1;
  assign sub_cast_1 = $signed({{10{a2mul1[29]}}, a2mul1});
  assign sub_temp = sub_cast - sub_cast_1;
  assign a2sum1 = sub_temp[39:0];

  assign sub_cast_2 = a2sum1;
  assign sub_cast_3 = $signed({{10{a3mul1[29]}}, a3mul1});
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign a1sum1 = sub_temp_1[39:0];

  assign b1multypeconvert1 = $signed({typeconvert1[15:0], 11'b00000000000});

  assign add_cast = b1multypeconvert1;
  assign add_cast_1 = $signed({{10{b2mul1[29]}}, b2mul1});
  assign add_temp = add_cast + add_cast_1;
  assign b2sum1 = add_temp[39:0];

  assign add_cast_2 = b2sum1;
  assign add_cast_3 = $signed({delay_section1[1][15:0], 11'b00000000000});
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign b1sum1 = add_temp_1[39:0];

  assign section_result1 = b1sum1[31:18];

  assign mul_temp_1 = section_result1 * scaleconst2;
  assign scale2 = $signed({mul_temp_1[27:0], 5'b00000});

  assign scaletypeconvert2 = scale2[32:19];

  //   ------------------ Section 2 ------------------

  assign typeconvert2 = a1sum2[27:12];

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 16'b0000000000000000;
        delay_section2[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= typeconvert2;
        end
      end
    end // delay_process_section2

  assign inputconv2 = $signed({scaletypeconvert2[13:0], 18'b000000000000000000});

  assign a2mul2 = delay_section2[0] * coeff_a2_section2;

  assign a3mul2 = delay_section2[1] * coeff_a3_section2;

  assign b2mul2 = $signed({delay_section2[0][15:0], 12'b000000000000});

  assign sub_cast_4 = inputconv2;
  assign sub_cast_5 = $signed({{10{a2mul2[29]}}, a2mul2});
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign a2sum2 = sub_temp_2[39:0];

  assign sub_cast_6 = a2sum2;
  assign sub_cast_7 = $signed({{10{a3mul2[29]}}, a3mul2});
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign a1sum2 = sub_temp_3[39:0];

  assign b1multypeconvert2 = $signed({typeconvert2[15:0], 11'b00000000000});

  assign add_cast_4 = b1multypeconvert2;
  assign add_cast_5 = $signed({{10{b2mul2[29]}}, b2mul2});
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign b2sum2 = add_temp_2[39:0];

  assign add_cast_6 = b2sum2;
  assign add_cast_7 = $signed({delay_section2[1][15:0], 11'b00000000000});
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign b1sum2 = add_temp_3[39:0];

  assign section_result2 = b1sum2[31:18];

  assign mul_temp_2 = section_result2 * scaleconst3;
  assign scale3 = $signed({mul_temp_2[27:0], 5'b00000});

  assign scaletypeconvert3 = scale3[32:19];

  //   ------------------ Section 3 ------------------

  assign typeconvert3 = a1sum3[27:12];

  always @ (posedge clk or posedge reset)
    begin: delay_process_section3
      if (reset == 1'b1) begin
        delay_section3[0] <= 16'b0000000000000000;
        delay_section3[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section3[1] <= delay_section3[0];
          delay_section3[0] <= typeconvert3;
        end
      end
    end // delay_process_section3

  assign inputconv3 = $signed({scaletypeconvert3[13:0], 18'b000000000000000000});

  assign a2mul3 = delay_section3[0] * coeff_a2_section3;

  assign a3mul3 = delay_section3[1] * coeff_a3_section3;

  assign b2mul3 = $signed({delay_section3[0][15:0], 12'b000000000000});

  assign sub_cast_8 = inputconv3;
  assign sub_cast_9 = $signed({{10{a2mul3[29]}}, a2mul3});
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign a2sum3 = sub_temp_4[39:0];

  assign sub_cast_10 = a2sum3;
  assign sub_cast_11 = $signed({{10{a3mul3[29]}}, a3mul3});
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign a1sum3 = sub_temp_5[39:0];

  assign b1multypeconvert3 = $signed({typeconvert3[15:0], 11'b00000000000});

  assign add_cast_8 = b1multypeconvert3;
  assign add_cast_9 = $signed({{10{b2mul3[29]}}, b2mul3});
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign b2sum3 = add_temp_4[39:0];

  assign add_cast_10 = b2sum3;
  assign add_cast_11 = $signed({delay_section3[1][15:0], 11'b00000000000});
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign b1sum3 = add_temp_5[39:0];

  assign section_result3 = b1sum3[31:18];

  assign mul_temp_3 = section_result3 * scaleconst4;
  assign scale4 = $signed({mul_temp_3[27:0], 5'b00000});

  assign scaletypeconvert4 = scale4[32:19];

  //   ------------------ Section 4 ------------------

  assign typeconvert4 = a1sum4[27:12];

  always @ (posedge clk or posedge reset)
    begin: delay_process_section4
      if (reset == 1'b1) begin
        delay_section4[0] <= 16'b0000000000000000;
        delay_section4[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section4[1] <= delay_section4[0];
          delay_section4[0] <= typeconvert4;
        end
      end
    end // delay_process_section4

  assign inputconv4 = $signed({scaletypeconvert4[13:0], 18'b000000000000000000});

  assign a2mul4 = delay_section4[0] * coeff_a2_section4;

  assign a3mul4 = delay_section4[1] * coeff_a3_section4;

  assign b2mul4 = $signed({delay_section4[0][15:0], 12'b000000000000});

  assign sub_cast_12 = inputconv4;
  assign sub_cast_13 = $signed({{10{a2mul4[29]}}, a2mul4});
  assign sub_temp_6 = sub_cast_12 - sub_cast_13;
  assign a2sum4 = sub_temp_6[39:0];

  assign sub_cast_14 = a2sum4;
  assign sub_cast_15 = $signed({{10{a3mul4[29]}}, a3mul4});
  assign sub_temp_7 = sub_cast_14 - sub_cast_15;
  assign a1sum4 = sub_temp_7[39:0];

  assign b1multypeconvert4 = $signed({typeconvert4[15:0], 11'b00000000000});

  assign add_cast_12 = b1multypeconvert4;
  assign add_cast_13 = $signed({{10{b2mul4[29]}}, b2mul4});
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign b2sum4 = add_temp_6[39:0];

  assign add_cast_14 = b2sum4;
  assign add_cast_15 = $signed({delay_section4[1][15:0], 11'b00000000000});
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign b1sum4 = add_temp_7[39:0];

  assign section_result4 = b1sum4[31:18];

  assign mul_temp_4 = section_result4 * scaleconst5;
  assign scale5 = $signed({mul_temp_4[27:0], 5'b00000});

  assign scaletypeconvert5 = scale5[32:19];

  //   ------------------ Section 5 ------------------

  assign typeconvert5 = a1sum5[27:12];

  always @ (posedge clk or posedge reset)
    begin: delay_process_section5
      if (reset == 1'b1) begin
        delay_section5[0] <= 16'b0000000000000000;
        delay_section5[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section5[1] <= delay_section5[0];
          delay_section5[0] <= typeconvert5;
        end
      end
    end // delay_process_section5

  assign inputconv5 = $signed({scaletypeconvert5[13:0], 18'b000000000000000000});

  assign a2mul5 = delay_section5[0] * coeff_a2_section5;

  assign a3mul5 = delay_section5[1] * coeff_a3_section5;

  assign b2mul5 = $signed({delay_section5[0][15:0], 12'b000000000000});

  assign sub_cast_16 = inputconv5;
  assign sub_cast_17 = $signed({{10{a2mul5[29]}}, a2mul5});
  assign sub_temp_8 = sub_cast_16 - sub_cast_17;
  assign a2sum5 = sub_temp_8[39:0];

  assign sub_cast_18 = a2sum5;
  assign sub_cast_19 = $signed({{10{a3mul5[29]}}, a3mul5});
  assign sub_temp_9 = sub_cast_18 - sub_cast_19;
  assign a1sum5 = sub_temp_9[39:0];

  assign b1multypeconvert5 = $signed({typeconvert5[15:0], 11'b00000000000});

  assign add_cast_16 = b1multypeconvert5;
  assign add_cast_17 = $signed({{10{b2mul5[29]}}, b2mul5});
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign b2sum5 = add_temp_8[39:0];

  assign add_cast_18 = b2sum5;
  assign add_cast_19 = $signed({delay_section5[1][15:0], 11'b00000000000});
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign b1sum5 = add_temp_9[39:0];

  assign output_typeconvert = b1sum5[31:18];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign iir_filter_out = output_register;
endmodule  // matlab_IIR
